####################
# Your custom rules!
####################

# Add new rules, like this one
# - rule: The program "sudo" is run in a container
#   desc: An event will trigger every time you run sudo in a container
#   condition: evt.type = execve and evt.dir=< and container.id != host and proc.name = sudo
#   output: "Sudo run in container (user=%user.name %container.info parent=%proc.pname cmdline=%proc.cmdline)"
#   priority: ERROR
#   tags: [users, container]

# Or override/append to any rule, macro, or list from the Default Rules
#- macro: container
#  condition: container.id != host

#- macro: open_write
#  condition: (evt.type=open or evt.type=openat) and evt.is_open_write=true and fd.typechar='f' and fd.num>=0

#- macro: open_read
#  condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='f' and fd.num>=0

- list: unwritable_files
  items: [/etc/shadow, /etc/sudoers, /etc/pam.conf, /tmp/test.w, /tmp/d.txt, /tmp/d1112.txt]
  rulename: Write sensitive files

- list: undelete_files
  items: [/tmp/test_del1.txt, /tmp/test_del2.txt, /tmp/d.txt, /tmp/test, /tmp/test11/t]
  rulename: Delete important files

- list: unread_files
  items: [/tmp/test_read1.txt, /tmp/test_read2.txt, /tmp/d.txt]
  rulename: Read sensitive files

- list: unrename_files
  items: [/tmp/d.txt, /tmp/d1.txt, /tmp/d11.txt]
  rulename: Rename sensitive files

- list: uncreated_dirs
  items: [/var/local/, /tmp/test, 123, 1123]
  rulename: Created file blew key directorys

- list: unlogin_containers
  items: [defense-scanner, nginx, deepdefense-monitor, deepdefense]
  rulename: Login user containers

- list: user_container_ports
  items: [5001, 8011]
  rulename: Establish connection with untrusted port

- list: user_trusted_shells
  items: [ls, bash, sh, date, ps]
  rulename: Used untrusted shells in container

- list: user_soft_mgmts
  items: [apt, apt-get, git, wget]
  rulename: Used software management tools in container

##################-----------------------------------RULES--------------------------------#########

- rule: Write sensitive files
  desc: an attempt to write to unwritable files
  condition: (fd.name in (unwritable_files) or (sensitive_files))  and evt.dir = < and (open_write or evt.arg.flags contains O_WRONLY or proc.cmdline contains "sed -i")
  output: 'Unwritable files opened for writing (containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type )'
  priority: ALERT
  tags: [filesystem]

###################-----------------------------------------------------------------#####################

- rule: Read sensitive files
  desc: an attempt to read to sensitive files
  condition: fd.name in (unread_files) and (open_read or evt.arg.flags contains O_RDONLY)
    and proc_name_exists
  output: 'Unwritable files opened for read (read=%evt.is_open_read type=%evt.type write=%evt.is_open_write filename=%fd.filename user=%user.name containerid=%container.id container=%container.name  command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline file=%fd.name program=%proc.name gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] args=%evt.args type=%evt.type)'
  priority: WARNING
  tags: [filesystem]

###################-----------------------------------------------------------------#####################

- rule: Created file blew key directorys
  desc: an attempt to create a file below a set of key directories.
  condition: fd.directory in (uncreated_dirs) and (evt.type = creat or (evt.type = open and evt.arg.flags contains O_CREAT)) and evt.arg.mode="0666"
  output: >
    "Created a new file  below key directorys (user=%user.name command=%proc.cmdline directory=%evt.arg.path arg0=%evt.arg[0] arg1=%evt.arg[1] args=%evt.args containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] dirs=%fd.directory flags=%evt.arg.flags type1=%evt.type mode=%evt.arg.mode)"
  priority: ERROR
  tags: [filesystem]

###################-----------------------------------------------------------------#####################

- rule: Delete sensitive files
  desc: an attempt to delete sensitive files
  condition: evt.arg.name in (undelete_files) and remove
  output: 'Delete sensitive files(containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline file=%evt.arg.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type )'
  priority: EMERGENCY
  tags: [filesystem]

###################-----------------------------------------------------------------#####################

- rule: Rename sensitive files
  desc: an attempt to rename sensitive files
  condition: evt.arg.oldpath in (unrename_files) and rename
  output: 'Rename sensitive files(containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type )'
  priority: EMERGENCY
  tags: [filesystem]

###################-----------------------------------------------------------------#####################

- rule: Login user containers
  desc: an attempt to login user containers
  condition: container.name in (unlogin_containers) and evt.type=execve and container
  output: 'Login user containers(containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type vpid=%proc.vpid)'
  priority: ERROR
  tags: [container]

###################-----------------------------------------------------------------#####################

- rule: Establish connection with untrusted port
  desc: an attempt to establish connection with untrusted port
  condition: fd.port in (user_container_ports)
  output: 'Establish connection with untrusted port(containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type )'
  priority: ALERT
  tags: [network]

###################-----------------------------------------------------------------#####################

- rule: Used untrusted shells in container
  desc: an attempt to login user containers
  condition: not proc.name in (user_trusted_shells) and evt.type=execve and container and container.id=111
  output: 'Used untrusted shells in container(containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type )'
  priority: ERROR
  tags: [process]

###################-----------------------------------------------------------------#####################

- rule: Used software management tools in container
  desc: an attempt to login user containers
  condition: proc.name in (user_soft_mgmts) and evt.type=execve
  output: 'Used software management tools in container(containerid=%container.id container=%container.name user=%user.name command=%proc.cmdline parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] args=%evt.args type=%evt.type )'
  priority: EMERGENCY
  tags: [process]

###################-----------------------------------------------------------------#####################

- rule: The program "sudo" is run in a container
  desc: An event will trigger every time you run sudo in a container
  condition: evt.type = execve and evt.dir=< and container.id != host and proc.name = sudo
  output: 'Sudo run in container (user=%user.name %container.info parent=%proc.pname cmdline=%proc.cmdline)'
  priority: ERROR
  tags: [users, container]
###################-----------------------------------------------------------------#####################


